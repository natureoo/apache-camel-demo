<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring-2.14.1.xsd ">
    <camelContext  xmlns="http://camel.apache.org/schema/spring">
        <endpoint id="jetty_from" uri="jetty:http://0.0.0.0:8282/httpCamel"/>
        <endpoint id="log_to1" uri="http4://localhost:8081/camel/post"/>
        <endpoint id="log_to2" uri="http4://localhost:8082/camel/post"/>
        <!--<route errorHandlerRef="myErrorHandler">-->


        <!--<onException redeliveryPolicyRef="myRedeliveryPolicy">-->
            <!--&lt;!&ndash; here we reference our redelivery policy &ndash;&gt;-->
            <!--&lt;!&ndash; the exception is full qualified names as plain strings &ndash;&gt;-->
            <!--&lt;!&ndash; there can be more just add a 2nd, 3rd exception element (unbounded) &ndash;&gt;-->
            <!--<exception>java.io.IOException</exception>-->
            <!--&lt;!&ndash; mark this as handled &ndash;&gt;-->

            <!--<continued>-->
                <!--<constant>true</constant>-->
            <!--</continued>-->
            <!--&lt;!&ndash; let our order service handle this exception, call the orderFailed method &ndash;&gt;-->
            <!--<bean ref="orderService" method="orderFailed" />-->
            <!--&lt;!&ndash; and since this is a unit test we use mock for assertions &ndash;&gt;-->
        <!--</onException>-->

        <route >

            <from ref="jetty_from"/>
            <process ref="httpProcesser"></process>
            <setHeader headerName="CamelHttpMethod">
                <simple>POST</simple>
            </setHeader>
            <setHeader headerName="Content-Type">
                <simple>application/json</simple>
            </setHeader>

            <onException>
                <exception>java.io.IOException</exception>
                <continued><constant>false</constant></continued>
                <bean ref="orderService" method="orderFailed" />
            </onException>
            <!--<doTry>-->

                <loadBalance>
                    <failover ></failover>
                    <!--<custom ref="myBalancer"></custom>-->

                    <to ref="log_to1"/>

                    <to ref="log_to2"/>
                </loadBalance>
                <!--<doCatch>-->
                    <!--&lt;!&ndash; catch IOExcption that we do not want to handle, eg the caller should get the error back &ndash;&gt;-->
                    <!--<exception>java.lang.Throwable</exception>-->
                    <!--&lt;!&ndash; mark this as NOT handled, eg the caller will also get the exception &ndash;&gt;-->

                    <!--&lt;!&ndash;<process ref="exceptionProcesser"></process>&ndash;&gt;-->
                    <!--&lt;!&ndash;<handled>&ndash;&gt;-->
                        <!--&lt;!&ndash;<constant>true</constant>&ndash;&gt;-->
                    <!--&lt;!&ndash;</handled>&ndash;&gt;-->
                    <!--<to uri="log:Throwable?showExchangeId=true"></to>-->
                <!--</doCatch>-->
           <!--</doTry>-->

            <!--<loadBalance>-->
                <!--<failover ></failover>-->
                <!--&lt;!&ndash;<custom ref="myBalancer"></custom>&ndash;&gt;-->

                <!--<to ref="log_to1"/>-->

                <!--<to ref="log_to2"/>-->
            <!--</loadBalance>-->
            <to uri="log:directRouteA?showExchangeId=true"></to>
            <to  uri="direct:directRouteB"></to>
        </route>
        <route>
            <from uri="direct:directRouteB"></from>
            <process ref="otherProcesser"></process>
            <to uri="log:directRouteB?showExchangeId=true"></to>
        </route>


    </camelContext>

    <bean id='myBalancer' class='demo.chenj.failover.CustomLoadBalance' />

    <bean id="httpProcesser" class="demo.chenj.processer.HttpProcessor"></bean>
    <bean id="otherProcesser" class="demo.chenj.processer.OtherProcessor"></bean>
    <bean id="exceptionProcesser" class="demo.chenj.processer.ExceptionProcessor"></bean>
    <bean id="orderService" class="demo.chenj.processer.OrderService"></bean>
    <!--&lt;!&ndash; here we define our redelivery policy using standard spring style &ndash;&gt;-->
    <!--<bean id="myRedeliveryPolicy" class="org.apache.camel.processor.RedeliveryPolicy">-->
        <!--<property name="maximumRedeliveries" value="1" />-->
    <!--</bean>-->

</beans>